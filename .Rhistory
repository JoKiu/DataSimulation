n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
exp_rate <- 0.04
c_ref <- 1 : 6 / 2
xmin <- 0; xmax <- 4
sigma_x <- function(x) (5 + x)/5
pr_all_list <- matrix(0, n + n_test, length(c_ref))
alpha<- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  sigma_x(x) * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test),]
data <- rbind(data_fit, data_calib)
########################################
## determine alpha
########################################
gamma=sum(data$event)/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$censored_T[which(data$event)]
x0<- data_test$X1
y0<- data_test$censored_T
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.04
alpha <- 0.1
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
gen_t <- function(x) 2 * exp(mu_x(x) + rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
########################################
## Generate training data
########################################
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
table(data$event)[2]
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.4
alpha <- 0.05
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
sigma_x <- function(x) (abs(x[,10]) + 1)
gen_t <- function(x) 2 * exp(mu_x(x) + sigma_x(x) * rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
## Generate training data
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
table(data$event)[2]
#Data simulation
#
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.04
alpha <- 0.05
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
sigma_x <- function(x) (abs(x[,10]) + 1)
gen_t <- function(x) 2 * exp(mu_x(x) + sigma_x(x) * rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
## Generate training data
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
gamma=sum(data$event)/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$censored_T[which(data$event)]
x0<- data_test$X1
y0<- data_test$censored_T
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
quantile(T)
quantile(T,probs=c(.75,.8,.85,.9,.95))
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
xmin <- 0; xmax <- 4
#exp_rate <- 0.4
exp_rate<-0.04#also try 0.025 and 0.01
alpha <- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  1.5 * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test), ]
data <- rbind(data_fit, data_calib)
########################################
## determine alpha
########################################
# gamma=sum(data$event)/nrow(data)
# alpha = (2*alpha)/gamma
#
# alpha
########################################
## preparing parameters for distribution free conformal methods
########################################
source('PO_function.R')
x <- data$X1
y <- get.po(censored_T = data$censored_T,event = data$event,tau = 17)
x0<- data_test$X1
y0<- data_test$censored_T
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
#Data simulation
#
########################################
## install and/or load package, load functions
########################################
rm(list=ls())
if(!require(conformalInference)){
library(devtools)
install_github(repo="ryantibs/conformal", subdir="conformalInference")
}
library(survival)
get.po<-function(censored_T,event,tau=15){
stopifnot(length(censored_T)==length(event))#check if length match
nn<-length(censored_T)
fit1<-survfit(Surv(censored_T,event)~1)#fit the whole dataset survival fit
tau = 15 #set maximum followup time
time_0 <- c(0,fit1$time[which(fit1$time<=tau)])#subset the time below tau
delta_t <- diff(time_0) #calculating delta t
n_t <- length(time_0)-1
delta_surv <- rowMeans(cbind(c(1,fit1$surv[1:(n_t-1)]),fit1$surv[1:n_t]))#calculate delta S(u)
output<-rep(NA,nn)
for(i in 1:nn){
fit2<-survfit(Surv(censored_T[-i],event[-i])~1) #removing one observation i
time_1 <- c(0,fit2$time[which(fit2$time<=tau)]) #refit
delta_ti <- diff(time_1) #calculate time gap
n_ti <- length(time_1)-1
delta_surv_i <- rowMeans(cbind(c(1,fit2$surv[1:(n_ti-1)]),fit2$surv[1:n_ti]))#calculate delta Si(u)
output[i]<-n*sum(delta_surv*delta_t)-(n-1)*sum(delta_surv_i*delta_ti)
}
return(output)
}
########################################
## Parameter
########################################
seed <- 1
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
xmin <- 0; xmax <- 4
#exp_rate <- 0.4
exp_rate<-0.04#also try 0.025 and 0.01
alpha <- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  1.5 * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test), ]
data <- rbind(data_fit, data_calib)
gamma=sum(data$event)/nrow(data)
alpha = (2*alpha)/gamma
alpha
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
#y <- data$censored_T[which(data$event)]
y <- get.po(censored_T = data$censored_T,event = data$event)#get pseudo observation survival time
x0<- data_test$X1
y0<- data_test$censored_T
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
nrow(x)
length(y)
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
rm(list=ls())
if(!require(conformalInference)){
library(devtools)
install_github(repo="ryantibs/conformal", subdir="conformalInference")
}
########################################
## Parameter
########################################
seed <- 1
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
xmin <- 0; xmax <- 4
#exp_rate <- 0.4
exp_rate<-0.04#also try 0.025 and 0.01
alpha <- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  1.5 * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test), ]
data <- rbind(data_fit, data_calib)
########################################
## determine alpha
########################################
gamma=sum(data$event)/nrow(data)
alpha = (2*alpha)/gamma
alpha
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$censored_T[which(data$event)]
#y <- get.po(censored_T = data$censored_T,event = data$event)#get pseudo observation survival time
x0<- data_test$X1
y0<- data_test$censored_T
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
