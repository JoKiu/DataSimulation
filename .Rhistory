data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
gamma=table(data$event)[2]/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$C[which(data$event)]
x0<- data_test$X1[which(data_test$event)]
y0<- data_test$C[which(data_test$event)]
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
#Data simulation
#
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.4
alpha <- 0.05
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
gen_t <- function(x) 2 * exp(mu_x(x) + rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
########################################
## Generate training data
########################################
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
gamma=table(data$event)[2]/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$C[which(data$event)]
x0<- data_test$X1[which(data_test$event)]
y0<- data_test$C[which(data_test$event)]
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
#Data simulation
#
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.4
alpha <- 0.05
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
gen_t <- function(x) 2 * exp(mu_x(x) + rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
########################################
## Generate training data
########################################
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
gamma=table(data$event)[2]/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$C[which(data$event)]
x0<- data_test$X1[which(data_test$event)]
y0<- data_test$C[which(data_test$event)]
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
#Data simulation
#
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
p <- 100
beta <- 30 / sqrt(n)
xnames <- paste0("X",1:p)
c_ref <-1 : 6 / 2
exp_rate <- 0.4
alpha <- 0.05
########################################
## Data generating models
########################################
mu_x <- function(x) beta * x[,1]^2 - beta * x[,3] * x[,5] + 1
sigma_x <- function(x) (abs(x[,10]) + 1)
gen_t <- function(x) 2 * exp(mu_x(x) + sigma_x(x) * rnorm(dim(x)[1]))
gen_c <- function(x) rexp(rate = exp_rate, n = dim(x)[1])
## Generate training data
set.seed(24601)
X <- matrix(runif(n_train * p, min = -1, max = 1), n_train)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data_fit <- data.frame(X, C = C, censored_T = censored_T, event = event)
colnames(data_fit) <- c(xnames, "C", "censored_T", "event")
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- matrix(runif((n_calib + n_test) * p, min = -1, max = 1), n_calib + n_test)
T <- gen_t(X)
C <- gen_c(X)
event <- (T<C)
censored_T <- pmin(T,C)
data <- data.frame(X, C = C, censored_T = censored_T,  event = event)
colnames(data) <- c(xnames, "C", "censored_T", "event")
data_calib <- data[1:n_calib,]
data_test <- data[(n_calib+1) : (n_calib+n_test),]
data <- rbind(data_fit,data_calib)
########################################
## determine alpha
########################################
gamma=table(data$event)[2]/nrow(data)
alpha = (2*alpha)/gamma
########################################
## preparing parameters for distribution free conformal methods
########################################
x <- data$X1[which(data$event)]
y <- data$C[which(data$event)]
x0<- data_test$X1[which(data_test$event)]
y0<- data_test$C[which(data_test$event)]
lambda<-0#ridge regression
########################################
## set up training and prediction functions
########################################
library(conformalInference)
my.lm.funs = lm.funs(lambda=lambda)
my.conf.fun = function(x, y, x0) {
conformal.pred(x,y,x0,alpha=alpha,verb="\t\t",
train.fun=my.lm.funs$train,
predict.fun=my.lm.funs$predict)
}
########################################
## train, predict and coverage
########################################
pred_out<-my.conf.fun(x,y,x0)
mean(y0>pred_out$lo)#lower bound only
mean(y0>pred_out$lo&y0<pred_out$up)
install.packages('surviminer')
library(survival)
library(surviminer)
install.packages('survminer')
library(survival)
library(surviminer)
library(survival)
library(survminer)
install.packages('ComparisonSurv')
View(X)
View(data)
View(X)
View(data)
library(survival)
library(survminer)
?Surv
View(data)
hist(data$C)
test.df<-data
tao = 15
data$surv_event<- ifelse(data$event==T,1,ifelse(data$censored_T<tao,0,2))
test.df$surv_event<- ifelse(data$event==T,1,ifelse(data$censored_T<tao,0,2))
data$event
test.df$surv_event<- ifelse(data$event,1,ifelse(data$censored_T<tao,0,2))
View(test.df)
surv.obj<- Surv(time = data$censored_T,event = data$event)
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
xmin <- 0; xmax <- 4
exp_rate <- 0.4
alpha <- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  1.5 * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test), ]
data <- rbind(data_fit, data_calib)
surv.obj<- Surv(time = data$censored_T,event = data$event)
survfit(formula = surv.obj~x,data = data)
survfit(formula = surv.obj~.,data = data)
View(data)
survfit(formula = surv.obj~X1,data = data)
class(data$X1)
?Surv
plot(surv.obj)
summary(surv.obj)
survfit(surv.obj~1)
summary(surv.obj)
survfit(Surv(censored_T,event)~1,data)
fit1<-survfit(Surv(censored_T,event)~1,data)
summary(fit1,time=10)
plot(fit1)
predict(fit1,time=10)
predict(fit1)
fit1
attributes(fit1)
fit1$surv
fit1$cumhaz
fit1$std.chaz
plot(fit1$std.chaz)
plot(fit1$time)
plot(fit1$n.censor)
plot(fit1$n.risk)
plot(fit1$n.risk,fit1$time)
plot(fit1$time,fit1$time)
plot(fit1$time,fit1$risk)
fit1$surv
plot(fit1$surv)
plot(fit1$surv,fit1$time)
plot(fit1$time,fit1$surv)
summary(fit1,times = 5.11111)
?Vectorize
Vectorize(fit1)
fit1$time
hist(fit1$time)
plot(fit1$time,fit1$surv)
plot(fit1$time,fit1$cumhaz)
approxfun(fit1$time,fit1$surv)
integrate(approxfun(fit1$time,fit1$surv),0,15)
integrate(approxfun(fit1$time,fit1$surv),0,10)
approxfun(fit1$time,fit1$surv)->ap
ap
View(ap)
fit1<-survfit(Surv(data$censored_T,data$event)~1)
summary(fit1,time=10)
approxfun(fit1$time,fit1$surv)
af<-approxfun(fit1$time,fit1$surv)
integrate(af,lower = 0,1)
plot(af)
fit1$time
hist(fit1$time)
?approxfun()
approxfun(c(1:10),seq(2:20,by=2))
approxfun(seq(1:10),seq(2:20,by=2))
approxfun(x=seq(1:10),y=seq(2:20,by=2))
approxfun(x=seq(1:10),y=seq(2,20,by=2))
plot(approxfun(x=seq(1:10),y=seq(2,20,by=2)))
integrate(approxfun(x=seq(1:10),y=seq(2,20,by=2)),0,2)
integrate(ap(x),0,2)
integrate(af(x),0,2)
identical(af,ap)
integrate(af(v),0,2)
integrate(af(1),0,2)
curve(ap())
curve(ap(x))
integrate(ap(x),0,1)
fc<-function(x){2*x^2}
integrate(fc(x),0,1)
?integrate
integrate(fc,0,1)
surv.obj<- Surv(time = data$censored_T,event = data$event,type = 'left')
plot(surv.obj)
summary(surv.obj)
fit1<-survfit(Surv(data$censored_T,data$event)~1)
summary(fit1,time=10)
af<-approxfun(fit1$time,fit1$surv)
integrate(af,lower = 0,1)
rm(list=ls())
seed <- 1
########################################
## Parameter
########################################
n <- 3000
n_train <- n / 2
n_calib <- n / 2
n_test <- 3000
beta <- 20 / sqrt(n)
xmin <- 0; xmax <- 4
exp_rate <- 0.4
alpha <- 0.1
########################################
## Data generating models
########################################
gen_t <- function(x) exp(2 + beta * sqrt(abs(x)) +  1.5 * rnorm(length(x)))
gen_c <- function(x) rexp(rate = exp_rate, n = length(x))
########################################
## Generate training data
########################################
set.seed(24601)
X <- runif(n_train, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data_fit <- data.frame(X1 = X, C = C, censored_T = censored_T, event = event)
########################################
## Generate the calibration data and the test data
########################################
set.seed(seed)
X <- runif(n_calib + n_test, xmin, xmax)
T <- gen_t(X)
C <- gen_c(X)
event <- (T < C)
censored_T <- pmin(T, C)
data <- data.frame(X1 = X, C = C, event = event, censored_T = censored_T)
data_calib <- data[1 : n_calib, ]
data_test <- data[(n_calib + 1) : (n_calib + n_test), ]
data <- rbind(data_fit, data_calib)
library(survival)
library(survminer)
surv.obj<- Surv(time = data$censored_T,event = data$event,type = 'left')
plot(surv.obj)
summary(surv.obj)
fit1<-survfit(Surv(data$censored_T,data$event)~1)
summary(fit1,time=10)
af<-approxfun(fit1$time,fit1$surv)
integrate(af,lower = 0,1)
fc<-function(x){2*x^2}
integrate(fc,0,1)
integrate(af,0,1)
plot(af)
plot(af,xlim = c(0,10))
?integrate
integrate(af,0,inf)
integrate(af,0,Inf)
?cumprod
cumprod(fit1$surv)
hist(cumprod(fit1$surv))
?survfit()
plot(af)
plot(af,xlim = c(0,15))
af(3)
af(10)
af(10.29991)
approx(fit1$time,fit1$surv)
?pspline
?survreg
fit1<-survreg(Surv(data$censored_T,data$event)~1)
summary(fit1,time=10)
af<-approxfun(fit1$time,fit1$surv)
fit1$coefficients
plot(fit1)
?pseudo()
pseudo()
pseudo
survresid
devtools::install_git('bnaras/conTree',force = T)
devtools::install_git("bnaras/conTree",force = T)
devtools::install_github("bnaras/conTree",force = T)
devtools::install_github("bnaras/conTree",force = TRUE)
surv.obj<- Surv(time = data$censored_T,event = data$event,type = 'left')
plot(surv.obj)
summary(surv.obj)
fit1<-survfit(Surv(data$censored_T,data$event)~1)
plot(fit1)
plot(surv.obj)
fit1<-survfit(Surv(data$censored_T,data$event)~1)
summary(fit1,time=10)
af<-approxfun(fit1$time,fit1$surv)
integrate(af,0,1)
fc<-function(x){2*x^2}
integrate(fc,0,1)
# integrate(af,0,1)
plot(af)
?pseudo()
pseudo(fit1)
pseudo(fit1,times = data$censored_T)
po<-pseudo(fit1,times = data$censored_T)
View(po)
?pspline
install.packages()
install.packages('ssc')
